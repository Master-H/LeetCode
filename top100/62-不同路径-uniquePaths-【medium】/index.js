/*
 * @Author: huangxingyuan
 * @Date: 2020-12-29 23:28:06
 * @LastEditors: huangxingyuan
 * @LastEditTime: 2020-12-29 23:35:03
 * @Description: 文件功能描述
 */
// 一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。

// 机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。

// 问总共有多少条不同的路径？
// 输入：m = 3, n = 7
// 输出：28
//  
// 思路与算法

// 我们用 f(i, j)f(i,j) 表示从左上角走到 (i, j)(i,j) 的路径数量，其中 ii 和 jj 的范围分别是 [0, m)[0,m) 和 [0, n)[0,n)。

// 由于我们每一步只能从向下或者向右移动一步，因此要想走到 (i, j)(i,j)，如果向下走一步，那么会从 (i-1, j)(i−1,j) 走过来；如果向右走一步，那么会从 (i, j-1)(i,j−1) 走过来。因此我们可以写出动态规划转移方程：

// f(i, j) = f(i-1, j) + f(i, j-1)
// f(i,j)=f(i−1,j)+f(i,j−1)

// 需要注意的是，如果 i=0i=0，那么 f(i-1,j)f(i−1,j) 并不是一个满足要求的状态，我们需要忽略这一项；同理，如果 j=0j=0，那么 f(i,j-1)f(i,j−1) 并不是一个满足要求的状态，我们需要忽略这一项。

// 初始条件为 f(0,0)=1f(0,0)=1，即从左上角走到左上角有一种方法。

// 最终的答案即为 f(m-1,n-1)f(m−1,n−1)。


var uniquePaths = function(m, n) {
    count 
    function dfs(m,n){

    }
};